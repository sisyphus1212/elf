--- mmap.orig.c	2019-12-01 22:12:40.251199936 +0800
+++ mmap-auto.c	2021-02-17 21:59:19.548933809 +0800
@@ -1,9 +1,12 @@
+/* Author: Wu Zhangjin, Wechat: tinylab */
+
 #include <sys/mman.h>
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <unistd.h>
+#include <unistd.h>     /* fork, execlp */
+#include <sys/wait.h>
 
 #define handle_error(msg) \
     do { perror(msg); exit(EXIT_FAILURE); } while (0)
@@ -11,15 +14,16 @@
 int
 main(int argc, char *argv[])
 {
-    char *addr;
+    char *addr = NULL;
     int fd;
     struct stat sb;
     off_t offset, pa_offset;
+    int inst_offset, data_offset;
     size_t length;
     ssize_t s;
 
-    if (argc < 3 || argc > 4) {
-        fprintf(stderr, "%s file offset [length]\n", argv[0]);
+    if (argc < 4 || argc > 5) {
+        fprintf(stderr, "%s file inst_offset data_offset [addr]\n", argv[0]);
         exit(EXIT_FAILURE);
     }
 
@@ -30,7 +34,10 @@
     if (fstat(fd, &sb) == -1)           /* To obtain file size */
         handle_error("fstat");
 
-    offset = atoi(argv[2]);
+    inst_offset = atoi(argv[2]);
+    data_offset = atoi(argv[3]);
+
+    offset = 0;                         /* not used by me */
     pa_offset = offset & ~(sysconf(_SC_PAGE_SIZE) - 1);
         /* offset for mmap() must be page aligned */
 
@@ -39,29 +46,35 @@
         exit(EXIT_FAILURE);
     }
 
-    if (argc == 4) {
-        length = atoi(argv[3]);
-        if (offset + length > sb.st_size)
-            length = sb.st_size - offset;
-                /* Can't display bytes past end of file */
-
-    } else {    /* No length arg ==> display to end of file */
-        length = sb.st_size - offset;
+    if (argc == 5) {
+        sscanf(argv[4], "%p", &addr);
     }
+    length = sb.st_size - offset;
 
-    addr = mmap(NULL, length + offset - pa_offset, PROT_READ,
-                MAP_PRIVATE, fd, pa_offset);
+    addr = mmap((void *)addr, length + offset - pa_offset, PROT_READ|PROT_WRITE|PROT_EXEC,
+                MAP_PRIVATE|MAP_FIXED|MAP_POPULATE, fd, pa_offset);
     if (addr == MAP_FAILED)
         handle_error("mmap");
 
-    s = write(STDOUT_FILENO, addr + offset - pa_offset, length);
-    if (s != length) {
-        if (s == -1)
-            handle_error("write");
-
-        fprintf(stderr, "partial write");
-        exit(EXIT_FAILURE);
+    /* dynamic linking: update the data address */
+    /* inst offset are gotten from this command: $ objdump -dr hello.o or readelf -r hello.o */
+    /* data offset are gotten from this command: $ readelf -S hello.o  | egrep " .text|Size" */
+    *(unsigned int *)(addr + inst_offset) = (uint)addr + data_offset;
+
+    /* flush icache: https://gcc.gnu.org/onlinedocs/gcc-8.3.0/gcc/Other-Builtins.html */
+    __builtin___clear_cache(addr, addr + length + offset - pa_offset);
+
+    int pid, status = 0;
+    if ((pid = fork()) == 0) {
+        /* execute it */
+        ((void (*)(void))addr)();
     }
 
+    wait(&status);
+
+    munmap(addr, length + offset - pa_offset);
+
+    //printf("exit\n");
+
     exit(EXIT_SUCCESS);
 }
